{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Component, ViewChild } from '@angular/core';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MoveCopyModalComponent } from 'src/app/shared/move-copy-modal/move-copy-modal.component';\nconst ELEMENT_DATA = [{\n  position: 1,\n  img: '',\n  name: 'folder 1',\n  folder: \"\",\n  Repository: \"Repository A\",\n  folderColor: \"\",\n  DeletedDate: '01/05/2022 3:30 PM',\n  gridListNav: 'gg',\n  isFolder: true\n}, {\n  position: 2,\n  img: '',\n  name: 'folder 2',\n  folder: \"\",\n  Repository: \"Repository B\",\n  folderColor: \"green\",\n  DeletedDate: '01/05/2022 3:30 PM',\n  gridListNav: 'gg',\n  isFolder: true\n}, {\n  position: 3,\n  img: '',\n  name: 'folder 3',\n  folder: \" \",\n  Repository: \"Repository C\",\n  folderColor: \"\",\n  DeletedDate: '01/05/2022 3:30 PM',\n  gridListNav: 'gg',\n  isFolder: true\n}, {\n  position: 4,\n  img: 'assets/images/icon-pdf.svg',\n  name: 'file 1',\n  Repository: \"Repository E\",\n  folderColor: \"\",\n  folder: \"Folder 1\",\n  DeletedDate: '01/06/2022 3:30 PM',\n  gridListNav: 'gg',\n  isFolder: false\n}, {\n  position: 5,\n  img: 'assets/images/icon-doc.svg',\n  name: 'file 2',\n  Repository: \"Repository D\",\n  folderColor: \"\",\n  folder: \"Folder 2\",\n  DeletedDate: '01/06/2022 3:30 PM',\n  gridListNav: 'gg',\n  isFolder: false\n}, {\n  position: 6,\n  img: 'assets/images/icon-xls.svg',\n  name: 'file 3',\n  Repository: \"Repository B\",\n  folderColor: \"\",\n  folder: \"Folder 3\",\n  DeletedDate: '01/04/2022 3:30 PM',\n  gridListNav: 'gg',\n  isFolder: false\n}, {\n  position: 7,\n  img: 'assets/images/icon-pdf.svg',\n  name: 'file 4',\n  Repository: \"Repository A\",\n  folderColor: \"\",\n  folder: \"Folder 4\",\n  DeletedDate: '01/05/2022 3:30 PM',\n  gridListNav: 'gg',\n  isFolder: false\n}, {\n  position: 8,\n  img: 'assets/images/icon-doc.svg',\n  name: 'file 5',\n  Repository: \"Repository C\",\n  folderColor: \"\",\n  folder: \"Folder 5\",\n  DeletedDate: '01/05/2022 3:30 PM',\n  gridListNav: 'gg',\n  isFolder: false\n}];\nlet TrashListViewComponent = class TrashListViewComponent {\n  constructor(_liveAnnouncer, dialog, router) {\n    this._liveAnnouncer = _liveAnnouncer;\n    this.dialog = dialog;\n    this.router = router;\n    this.displayedColumns = ['checkbox', 'img', 'name', 'folder', 'Repository', 'DeletedDate', 'gridListNav'];\n    this.dataSource = new MatTableDataSource(ELEMENT_DATA);\n    this.clickedRows = new Set();\n    this.selection = new SelectionModel(true, []);\n    this.contextMenuPosition = {\n      x: '0px',\n      y: '0px'\n    };\n    this.isFolder = false;\n    this.selectedPosition = 0;\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  /** The label for the checkbox on the passed row */\n\n\n  checkboxLabel(row) {\n    if (!row) {\n      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;\n    }\n\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.position + 1}`;\n  }\n\n  onContextMenu(event, row) {\n    this.selectedPosition = row.position;\n    this.isFolder = row.isFolder;\n    event.preventDefault();\n    this.contextMenuPosition.x = event.clientX + 'px';\n    this.contextMenuPosition.y = event.clientY + 'px';\n    this.contextMenu.openMenu();\n  }\n\n  selctedMenuPosition(element) {\n    this.selectedPosition = element.position;\n  }\n\n  rowIsFolder() {\n    return {\n      isFolder: this.isFolder\n    };\n  }\n\n  fileFolderDetails() {\n    if (this.isFolder) {\n      this.router.navigate(['../', 'repository', 'folder-details']);\n    } else {\n      this.router.navigate(['../', 'repository', 'file-details']);\n    }\n  }\n\n  isFolderAndFile(isFolder) {\n    this.isFolder = isFolder;\n  }\n\n  fileFolderNavigation(name) {\n    const folderFileInfo = ELEMENT_DATA.find(f => f.name === name);\n\n    if (folderFileInfo === null || folderFileInfo === void 0 ? void 0 : folderFileInfo.isFolder) {\n      this.router.navigate(['../', 'repository', 'folder-view']);\n    } else {\n      this.router.navigate(['../', 'repository', 'file-details']);\n    }\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n\n  ngOnInit() {\n    window.scroll(0, 0); // this.dataSource.sort = this.sort;\n  }\n\n  openMoveCopyDialog() {\n    const dialogRef = this.dialog.open(MoveCopyModalComponent, {\n      panelClass: 'custon-width-md'\n    });\n    dialogRef.afterClosed().subscribe(result => {});\n  }\n  /** Announce the change in sort state for assistive technology. */\n\n\n  announceSortChange(sortState) {\n    if (sortState.direction) {\n      this._liveAnnouncer.announce(`Sorted ${sortState.direction}ending`);\n    } else {\n      this._liveAnnouncer.announce('Sorting cleared');\n    }\n  }\n\n};\n\n__decorate([ViewChild(MatPaginator)], TrashListViewComponent.prototype, \"paginator\", void 0);\n\n__decorate([ViewChild(MatMenuTrigger, {\n  static: true\n})], TrashListViewComponent.prototype, \"contextMenu\", void 0);\n\n__decorate([ViewChild(MatSort)], TrashListViewComponent.prototype, \"sort\", void 0);\n\nTrashListViewComponent = __decorate([Component({\n  selector: 'app-trash-list-view',\n  templateUrl: './trash-list-view.component.html',\n  styleUrls: ['./trash-list-view.component.scss']\n})], TrashListViewComponent);\nexport { TrashListViewComponent };","map":null,"metadata":{},"sourceType":"module"}