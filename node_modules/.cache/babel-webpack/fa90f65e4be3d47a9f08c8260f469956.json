{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSort } from '@angular/material/sort';\nconst ELEMENT_DATA = [{\n  position: 1,\n  checkbox: '',\n  name: 'Kishoor, Kumar',\n  action: ' Owner',\n  date: ' 01/05/2022 3:30 PM',\n  download: '01/05/2022 3:30 PM'\n}, {\n  position: 2,\n  checkbox: '',\n  name: 'Unni, Mugunthan',\n  action: ' Write',\n  date: ' 01/05/2022 3:30 PM',\n  download: '01/05/2022 3:30 PM'\n}, {\n  position: 3,\n  checkbox: '',\n  name: 'Kishoor, Kumar',\n  action: ' Owner',\n  date: ' 01/05/2022 3:30 PM',\n  download: '01/05/2022 3:30 PM'\n}, {\n  position: 4,\n  checkbox: '',\n  name: 'Kaliyani, Rahgavan',\n  action: ' Read-only',\n  date: ' 01/05/2022 3:30 PM',\n  download: '01/05/2022 3:30 PM'\n}];\nlet VersionHitoryComponent = class VersionHitoryComponent {\n  constructor(_liveAnnouncer) {\n    this._liveAnnouncer = _liveAnnouncer;\n    this.displayedColumns = ['action', 'name', 'date', 'download'];\n    this.dataSource = new MatTableDataSource(ELEMENT_DATA);\n    this.selection = new SelectionModel(true, []);\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  /** The label for the checkbox on the passed row */\n\n\n  checkboxLabel(row) {\n    if (!row) {\n      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;\n    }\n\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.position + 1}`;\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.sort = this.sort;\n  }\n\n  ngOnInit() {}\n\n  announceSortChange(sortState) {\n    if (sortState.direction) {\n      this._liveAnnouncer.announce(`Sorted ${sortState.direction}ending`);\n    } else {\n      this._liveAnnouncer.announce('Sorting cleared');\n    }\n  }\n\n};\n\n__decorate([ViewChild(MatSort)], VersionHitoryComponent.prototype, \"sort\", void 0);\n\nVersionHitoryComponent = __decorate([Component({\n  selector: 'app-version-hitory',\n  templateUrl: './version-hitory.component.html',\n  styleUrls: ['./version-hitory.component.scss']\n})], VersionHitoryComponent);\nexport { VersionHitoryComponent };","map":null,"metadata":{},"sourceType":"module"}