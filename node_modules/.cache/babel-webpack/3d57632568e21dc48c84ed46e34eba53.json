{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { ViewChild } from '@angular/core';\nimport { ConformationDialogComponent } from './conformation-dialog/conformation-dialog.component';\nimport { AlertDialogComponent } from './alert-dialog/alert-dialog.component';\nimport { RepositoriesOrderModalComponent } from 'src/app/shared/repositories-order-modal/repositories-order-modal.component';\nlet MessagesComponent = class MessagesComponent {\n  constructor(toastr, dialog) {\n    this.toastr = toastr;\n    this.dialog = dialog;\n    this.security = new FormControl();\n    this.fileType = new FormControl();\n    this.securityValue = [{\n      value: 'visibility_off',\n      className: 'visibility-off',\n      viewValue: 'Private'\n    }, {\n      value: 'visibility',\n      className: 'visibility',\n      viewValue: 'Public'\n    }];\n    this.fileTypeValue = [{\n      value: 'assets/images/icon-pdf.svg',\n      className: '',\n      viewValue: 'PDF'\n    }, {\n      value: 'assets/images/icon-doc.svg',\n      className: '',\n      viewValue: 'Doc'\n    }, {\n      value: 'assets/images/icon-xls.svg',\n      className: '',\n      viewValue: 'Excel'\n    }];\n    this.sortvalue = [{\n      value: 'Alphanumeric',\n      viewValue: 'Alphanumeric',\n      className: ''\n    }, {\n      value: 'Numeric',\n      viewValue: 'Numeric',\n      className: ''\n    }, {\n      value: 'Date',\n      viewValue: 'Date',\n      className: ''\n    }, {\n      value: 'Lookup',\n      viewValue: 'Lookup',\n      className: ''\n    }, {\n      value: 'Boolean',\n      viewValue: 'Boolean',\n      className: ''\n    }];\n    this.selectedValue = '0';\n    this.currentPasswordtype = 'password';\n    this.newPasswordtype = 'password';\n    this.confirmPasswordtype = 'password';\n    this.separatorKeysCodes = [ENTER, COMMA];\n    this.AdminUserCtrl = new FormControl();\n    this.AdminUser = [];\n    this.allAdminUser = ['Jone, Jose', 'Praksh, Kumar', 'Thomas, Jone ', 'Kumar, Ravan', 'Vishanth, John'];\n    this.options = ['Jason, Doe', 'Prakash, Chandra', 'Srikanta, Prakash'];\n    this.filteredAdminUser = this.AdminUserCtrl.valueChanges.pipe(startWith(null), map(AdminUserName => AdminUserName ? this._filter(AdminUserName) : this.allAdminUser.slice()));\n  }\n\n  showCurrentPassword() {\n    this.currentPasswordtype = this.currentPasswordtype === 'password' ? 'text' : 'password';\n  }\n\n  showNewPassword() {\n    this.newPasswordtype = this.newPasswordtype === 'password' ? 'text' : 'password';\n  }\n\n  showConfirmPassword() {\n    this.confirmPasswordtype = this.confirmPasswordtype === 'password' ? 'text' : 'password';\n  } //constructor(public dialog: MatDialog) {}\n\n\n  openRepositoriesOrderDialog() {\n    const dialogRef = this.dialog.open(RepositoriesOrderModalComponent, {\n      panelClass: 'drag-list-dialog'\n    });\n    dialogRef.afterClosed().subscribe(result => {});\n  }\n\n  showSuccess() {\n    this.toastr.success('An example success alert with an icon', 'Success!', {\n      closeButton: true,\n      positionClass: 'toast-top-center'\n    });\n  }\n\n  showError() {\n    this.toastr.error('An example danger alert with an icon', 'Error!', {\n      closeButton: true,\n      positionClass: 'toast-top-center',\n      disableTimeOut: false\n    });\n  }\n\n  showWarning() {\n    this.toastr.warning('An example warning alert with an icon', 'Warning!', {\n      closeButton: true,\n      positionClass: 'toast-top-center',\n      disableTimeOut: false\n    });\n  }\n\n  add(event) {\n    const value = (event.value || '').trim(); // Add our AdminUserName\n\n    if (value) {\n      this.AdminUser.push(value);\n    } // Clear the input value\n\n\n    event.chipInput.clear();\n    this.AdminUserCtrl.setValue(null);\n  }\n\n  remove(AdminUserName) {\n    const index = this.AdminUser.indexOf(AdminUserName);\n\n    if (index >= 0) {\n      this.AdminUser.splice(index, 1);\n    }\n  }\n\n  selected(event) {\n    this.AdminUser.push(event.option.viewValue);\n    this.AdminUserInput.nativeElement.value = '';\n    this.AdminUserCtrl.setValue(null);\n  }\n\n  _filter(value) {\n    const filterValue = value.toLowerCase();\n    return this.allAdminUser.filter(AdminUserName => AdminUserName.toLowerCase().includes(filterValue));\n  }\n\n  getFileTypeName(fileSrc) {\n    const file = this.fileTypeValue.find(f => f.value === fileSrc);\n    return file === null || file === void 0 ? void 0 : file.viewValue;\n  }\n\n  getSecurityTypeName(fileSrc) {\n    const scc = this.securityValue.find(f => f.value === fileSrc);\n    return scc === null || scc === void 0 ? void 0 : scc.viewValue;\n  }\n\n  openConfirmationDialog() {\n    const dialogRef = this.dialog.open(ConformationDialogComponent, {\n      panelClass: 'xm-dialog'\n    });\n  }\n\n  openAlertDialog() {\n    const dialogRef = this.dialog.open(AlertDialogComponent, {\n      panelClass: 'xm-dialog'\n    });\n  }\n\n  onFileChange(event) {\n    let files = event.target.files;\n    this.saveFiles(files);\n  }\n\n  ngOnInit() {\n    this.dragAreaClass = \"dragarea\";\n  }\n\n  onDragOver(event) {\n    this.dragAreaClass = \"droparea\";\n    event.preventDefault();\n  }\n\n  onDragEnter(event) {\n    this.dragAreaClass = \"droparea\";\n    event.preventDefault();\n  }\n\n  onDragEnd(event) {\n    this.dragAreaClass = \"dragarea\";\n    event.preventDefault();\n  }\n\n  onDragLeave(event) {\n    this.dragAreaClass = \"dragarea\";\n    event.preventDefault();\n  }\n\n  onDrop(event) {\n    this.dragAreaClass = \"dragarea\";\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (event.dataTransfer.files) {\n      let files = event.dataTransfer.files;\n      this.saveFiles(files);\n    }\n  }\n\n  saveFiles(files) {\n    if (files.length > 1) this.error = \"Only one file at time allow\";else {\n      this.error = \"\";\n      this.draggedFiles = files;\n    }\n  }\n\n};\n\n__decorate([ViewChild('AdminUserInput')], MessagesComponent.prototype, \"AdminUserInput\", void 0);\n\n__decorate([HostListener(\"dragover\", [\"$event\"])], MessagesComponent.prototype, \"onDragOver\", null);\n\n__decorate([HostListener(\"dragenter\", [\"$event\"])], MessagesComponent.prototype, \"onDragEnter\", null);\n\n__decorate([HostListener(\"dragend\", [\"$event\"])], MessagesComponent.prototype, \"onDragEnd\", null);\n\n__decorate([HostListener(\"dragleave\", [\"$event\"])], MessagesComponent.prototype, \"onDragLeave\", null);\n\n__decorate([HostListener(\"drop\", [\"$event\"])], MessagesComponent.prototype, \"onDrop\", null);\n\nMessagesComponent = __decorate([Component({\n  selector: 'app-messages-template',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.scss']\n})], MessagesComponent);\nexport { MessagesComponent };","map":null,"metadata":{},"sourceType":"module"}